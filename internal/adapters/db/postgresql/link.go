package postgresql

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/pkg/errors"
	"url-shortener-api/internal/domain/entities"
	"url-shortener-api/internal/domain/services"
	"url-shortener-api/pkg/clients/postgresql"
)

const (
	callFNCreateLink = `SELECT a, b FROM fn_create_link($1, $2) AS (a int, b text)`
	selectURL        = `SELECT URL FROM t_links WHERE link = $1`
)

const (
	errURLExists      = "the link for URL %s already exists, try using ID = %s"
	errLinkIdExists   = "id exists"
	errUnexpectedCode = "unexpected code received from DB"
	errNoLinkInDB     = "there is no passed link in DB"
)

type linkStoragePostgres struct {
	client postgresql.Client
}

func NewStoragePostgres(postgresqlClient postgresql.Client) services.Storage {
	return &linkStoragePostgres{client: postgresqlClient}
}

func (ts *linkStoragePostgres) Create(URL string, linkId string) (*entities.Link, error) {
	//var fnCode int
	type responseDB struct {
		fnCode int
		linkId string
	}
	respDB := responseDB{}

	err := ts.client.QueryRow(context.TODO(), callFNCreateLink, URL, linkId).Scan(&respDB.fnCode, &respDB.linkId)
	if err != nil {
		return nil, err
	}

	switch respDB.fnCode {
	case 0:
		//URL was created
		return &entities.Link{Id: linkId, URL: URL}, nil
	case 1:
		return nil, errors.New(fmt.Sprintf(errURLExists, URL, respDB.linkId))
	case 2:
		//linkId generated by randomizer method already exists in DB
		return nil, errors.New(fmt.Sprintf(errLinkIdExists))
	}

	return nil, errors.New(fmt.Sprintf(errUnexpectedCode))
}

func (ts *linkStoragePostgres) GetOne(id string) (*entities.Link, error) {
	var link entities.Link
	err := ts.client.QueryRow(context.TODO(), selectURL, id).Scan(&link.URL)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, errors.New(fmt.Sprintf(errNoLinkInDB))
		}
		return nil, err
	}

	link.Id = id

	return &link, nil
}
